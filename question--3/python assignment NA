#appendix -c
#q-3
class PolynomialSolver:
	def Func(self,n,L,val):                                                 ## method for finding value of polynomial function at x i.e. f(x)
		p=0
		for i in range(n+1):
			p+=L[i]*(val**i)
		return p
	def Fder(self,n,L,val):
		p=0
		for i in range(1,n+1):
			p+=i*L[i]*(val**(i-1))                      
		return p
	def solve(self,n,L,method):
		if(method=="bisection"):						## for bisection method	
			print("Enter lower bound  in which root lies")
			l=int(input())
			print("Enter upper bound in which root lies")
			u=int(input())
			print("Enter maximum number of itertions")
			it=int(input())
			while(abs(self.Func(n,L,l)-self.Func(n,L,u))>0.000001 and it>0):
				m=(l+u)/2
				if(self.Func(n,L,l)*self.Func(n,L,m)<0):
					u=m
				else:
					l=m
				print (l,u,self.Func(n,L,l),self.Func(n,L,u))
				it-=1
			return([l,u])
		if(method=="secant"):									## for secant method
			print("Enter lower bound in which root lies")
			l=int(input())
			print("Enter upper bound in which root lies")
			u=int(input())
			print("Enter maximum number of itertions")
			it=int(input())
			while(abs(self.Func(n,L,l))>0.00001 and it>0):
				f1=self.Func(n,L,l)
				f2=self.Func(n,L,u)
				l,u=u,u-(((u-l)*f2)/(f2-f1))
				print (l,u,f1,f2)
				it-=1
			return(l)
		if(method=="secantRF"):									## for secantRF method
			print("Enter lower bound in which root lies")
			l=int(input())
			print("Enter upper bound in which root lies")
			u=int(input())
			m=l
			print("Enter maximum number of itertions")
			it=int(input())
			while(abs(self.Func(n,L,m))>0.000001 and it>0):
				f1=self.Func(n,L,l)
				f2=self.F(n,L,u)
				m=u-(((u-l)*f2)/(f2-f1))
				fm=self.Func(n,L,m)
				if(f1*fm<0):
					u=m
				else:
					l=m
				print (m)
				it-=1
			return(l)
		if(method=="newtonraphson"):							## for newtonraphson method
			print("Enter lower bound in which root lies")
			l=int(input())
			print("Enter maximum number of itertions")
			it=int(input())
			while(abs(self.Func(n,L,l))>0.000001 and it>0):
				l=l-self.Func(n,L,l)/self.Fder(n,L,l)
			return(l)
		else:
			return NULL
