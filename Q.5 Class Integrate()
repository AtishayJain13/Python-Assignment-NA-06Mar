'''#Group-5
#Q.5
>>> class Integrate():

        #a is the lower limit of integration
        #b is the upper limit of integration
        #n is the number of divisions and more the number of divisions,more is the accuracy
        #fn is the function whose integration has to be done
        #method : 1.Trapezoidal Rule 2.Simpsons Rule
        #input : a,b,n,fn

	def TrapezoidalRule(a,b,n,fn):              #Method:1,function.1
		sol=fn(a)
		for i in range(1,n):
			sol=sol+2*fn(a+(i*(b-a))/n)
		sol=sol+fn(b)
		sol=(sol*(b-a))/(2*n)                     #We evalute the value needed.
		return sol                                #Now it's time to return this value.

	def SimpsonsRule(a,b,n,fn):                 #Method:2,function.2
		sol=fn(a)
		for i in range(1,n,2):
			sol=sol+ 4*fn(a+(i*(b-a))/n)
		for i in range(2,n,2):
			sol=sol+ 2*fn(a+(i*(b-a))/n)
		sol=sol+fn(b)
		sol=(sol*(b-a))/(3*n)                     #We evalute the value needed.
		return sol                                #Now it's time to return this value.

	def solve(self,a,b,n,fn,method):            #solve() function :that calls either of the two above functions according to the input method.
		if(method=='trapezoid'):
			sol=TrapezoidalRule(a,b,n,fn)
			return sol
		if(method=='simpson'):
			sol=SimpsonsRule(a,b,n,fn)
			return sol




#Example:
>>> f=lambda x:x*x			
>>> igr=Integrate()
>>> for method in ['trapezoid','simpson']:
	solution=igr.solve(1,6,100,f,method)
	print(solution)

	
71.66875
71.66666666666666'''
import numpy as np
import matplotlib.pyplot as plt
class integrate():
    def solve(self,f,m,ll,ul,N):
        if m=='trapezoid':
            a=ul-ll/float(N)
            X=np.linspace(ll,ul,N-1)
            return a*(f(ll)+f(ul)+2*sum(f(X)))/float(2)
        elif m=='simpson':
            a=float(ul-ll)/float(N)
            sumodd=0
            i=ll+a
            while i<ul:
                sumodd=sumodd+f(i)
                i=i+2*a
            sumeven=0
            i=ll+2*a
            while i<ul:
                sumeven=sumeven+f(i)
                i=i+2*a
            return a*(f(ll)+f(ul)+4*sumodd+2*sumeven)/float(3)

    def plot(self,f,ll,ul,N):
        X1=np.arange(ll,ul,0.01)
        plt.plot(X1,f(X1),'k')
        X=np.linspace(ll,ul,N+1)
        ymax=max(f(X))
        ymin=min(f(X))
        plt.vlines(X,0,f(X),'r')
        plt.hlines(0,ll,ul,'r')
        plt.plot(X,f(X),'r')
        plt.xlabel('x axis')
        plt.ylabel('y axis')
        plt.title('Integrate')
        plt.axis([ll-2,ul+2,ymin-2,ymax+2])
        plt.fill_between(X,f(X),color='yellow')
        plt.show()

def function(x):
    return x*x

lowerlimit=1
upperlimit=4
no_interval=4

igr=integrate()
for method in ['trapezoid','simpson']:
    solution= igr.solve(function,method,lowerlimit,upperlimit,no_interval)
    print solution
igr.plot(function,lowerlimit,upperlimit,no_interval)

