'''from numpy import array
from numpy.polynomial import polynomial as P

class Interpolate:
    
    def solve(self,A,B,method):
        if(method=="newton"):
            return (self.Newton(A,B))
        else:
            return (self.Lagrange(A,B))

    def Lagrange(self,A,B):                                              
               
        l=len(A)                                                           
        w=(-1*A[0],1)                                                      
        for i in range(1,l):
            w=P.polymul(w,(-1*A[i],1))                                    
        r=array([0.0 for i in range(len(w)-1)])                    
        d=P.polyder(w)                                             
        for i in range(l):
            r+=(P.polydiv(w,(-1*A[i],1))[0]*B[i])/P.polyval(A[i],d)   
        return(list(r))    
        
                                                                                                
    def Newton(self,A,B):                                                   
               
        from numpy import array
        from numpy.polynomial import polynomial as P
        n=len(A)                                                            
        mat=[[0.0 for i in range(n)] for j in range(n)]                    
        for k in range(n):                                                 
            mat[k][0]=B[k]
        for k in range(1,n):                                               
            for j in range(n-k):
                mat[j][k]=(mat[j+1][k-1]-mat[j][k-1])/(A[j+k]-A[j])
        r=array((mat[0][0],))                                          
        for i in range(1,n):
            prod=(-1*A[0],1)                                                                                              
            for j in range(1,i):
                prod=P.polymul(prod,(-1*A[j],1))                              
            r=P.polyadd(r,array(prod)*mat[0][i])                  
        return (list(r))                                               

apx=Interpolate()                                                          
for method in ["newton","lagrange"]:
    solution=apx.solve([1,2,3],[0,-1,0],method)
    print(solution)'''
    

import sympy as sp
import matplotlib.pyplot as plt
import numpy as np
class Interpolate:
    S, Q, R = [], [], []
    # for finding limits, polynomials
    x = sp.Symbol('x')
    def Lag_Poly(self, L, M):
        # X for storing x coordinates
        # Y for storing f(x)
        self.Q, self.R = L, M
        for i in range(len(L)):
            u, j = 1, 0
            # forming list of polynomials
            # summation of which is Lagrange Polynomial
            while j < len(L):
                if i != j:
                    u *= (self.x-L[j])/(L[i]-L[j])
                j += 1   
            u*= M[i] 
            self.S.append(u)
        # plot Lagrange Polynomial
        self.plot_Poly()      
    
    def plot_Poly(self, var = []):
        a = np.arange(0,max(self.Q)+0.2,0.1)
        pol_sum = 0
        # plot function in the list
        for  i in self.S:
            pol_sum += i
            for j in a:
                var.append(sp.limit(i,self.x,j))
            plt.plot(a, var)             
            var = []       
        # plot Lagrange Polynomial in Black Color
        for j in a:
                var.append(sp.limit(pol_sum,self.x,j))
        plt.plot(a, var,'k')
        # plot node points
        plt.plot(self.Q,self.R,'ro')
        plt.title('INTERPOLATING POLYNOMIAL IS BLACK')
        plt.xlabel('X-AXIS')
        plt.ylabel('Y-AXIS')
        plt.show()

apx = Interpolate()

apx.Lag_Poly([0,1,2,3],[-5,-6,-1,16])
